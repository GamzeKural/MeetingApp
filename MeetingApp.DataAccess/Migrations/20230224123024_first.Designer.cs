// <auto-generated />
using System;
using MeetingApp.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeetingApp.DataAccess.Migrations
{
    [DbContext(typeof(MeetingAppDbContext))]
    [Migration("20230224123024_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MeetingApp.Entities.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("MeetingApp.Entities.Models.EmailRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmailId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailRecipients");
                });

            modelBuilder.Entity("MeetingApp.Entities.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("Document")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserTheCreatedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserTheCreatedId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("MeetingApp.Entities.Models.MeetingParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("MeetingParticipants");
                });

            modelBuilder.Entity("MeetingApp.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<byte[]>("ProfilePhoto")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Gamze Nur",
                            LastName = "Kural",
                            Mail = "kuralgamzenur@gmail.com",
                            Password = "123",
                            Phone = "05554443322"
                        });
                });

            modelBuilder.Entity("MeetingApp.Entities.Models.Email", b =>
                {
                    b.HasOne("MeetingApp.Entities.Models.User", "SenderUser")
                        .WithMany("Emails")
                        .HasForeignKey("SenderUserId")
                        .IsRequired();

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("MeetingApp.Entities.Models.EmailRecipient", b =>
                {
                    b.HasOne("MeetingApp.Entities.Models.Email", "Email")
                        .WithMany("EmailRecipients")
                        .HasForeignKey("EmailId")
                        .IsRequired();

                    b.HasOne("MeetingApp.Entities.Models.User", "User")
                        .WithMany("EmailRecipients")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Email");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeetingApp.Entities.Models.Meeting", b =>
                {
                    b.HasOne("MeetingApp.Entities.Models.User", "UserTheCreated")
                        .WithMany("Meetings")
                        .HasForeignKey("UserTheCreatedId")
                        .IsRequired();

                    b.Navigation("UserTheCreated");
                });

            modelBuilder.Entity("MeetingApp.Entities.Models.MeetingParticipant", b =>
                {
                    b.HasOne("MeetingApp.Entities.Models.Meeting", "Meeting")
                        .WithMany("MeetingParticipants")
                        .HasForeignKey("MeetingId")
                        .IsRequired();

                    b.HasOne("MeetingApp.Entities.Models.User", "User")
                        .WithMany("MeetingParticipants")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeetingApp.Entities.Models.Email", b =>
                {
                    b.Navigation("EmailRecipients");
                });

            modelBuilder.Entity("MeetingApp.Entities.Models.Meeting", b =>
                {
                    b.Navigation("MeetingParticipants");
                });

            modelBuilder.Entity("MeetingApp.Entities.Models.User", b =>
                {
                    b.Navigation("EmailRecipients");

                    b.Navigation("Emails");

                    b.Navigation("MeetingParticipants");

                    b.Navigation("Meetings");
                });
#pragma warning restore 612, 618
        }
    }
}
